// Reverse a Linked List in groups of given size

class Solution {
    public static Node reverse(Node node, int k) {
        
        Node curr = node;
        Node next = null;
        Node prev = null;
        
        int count = 0;
        
        while (count < k && curr != null) {
            next = curr.next;
            
            curr.next = prev;
            prev = curr;
            curr = next;
            
            count++;
        }
        
        if (next != null)
            node.next = reverse (next, k);
            
        return prev;
        
    }
}
*************************************************************************************************

// Remove duplicate element from sorted Linked List

class GfG {
    //Function to remove duplicates from sorted linked list.
    Node removeDuplicates(Node head) {
	
	    Node temp = head;
	    
	    while (temp.next != null) {
	        Node t_next = temp.next;
	        if (temp.data == t_next.data)
	            temp.next = t_next.next;
	       else
	            temp = temp.next;
	    }
	    
	    return head;
	
    }
}
*************************************************************************************************

// Row with max 1s
class Solution {
    int rowWithMax1s(int arr[][], int n, int m) {
	int row = -1;
        int max = 0;
        
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < m; j++) {
                if (arr[i][j] == 1)
                    count++;
            }
            if (count > max) {
                max = count;
                row = i;
            }
        }
        return row;
    }
}

*************************************************************************************************

// First Repeating Element
class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr, int n) {
        
        // optimal
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            if (map.containsKey(arr[i])) 
                map.put(arr[i], map.get(arr[i]) + 1);
            else
                map.put(arr[i], 1);
        }
        
        for (int i = 0; i < n; i++) {
            if (map.get(arr[i]) > 1)
                return i+1;
        }
        
        return -1;
	}
}

*************************************************************************************************

// Three way partitioning

class Solution {
    //Function to partition the array around the range such 
    //that array is divided into three parts.
    public void threeWayPartition(int array[], int a, int b) {
	
	int n = array.length;
        int low = 0;
        int high = n - 1;
        
        for (int i = 0; i <= high; i++) {
            if (array[i] < a) {
                int temp = array[low];
                array[low] = array[i];
                array[i] = temp;
                
                low++;
            } else if (array[i] > b) {
                int temp = array[i];
                array[i] = array[high];
                array[high] = temp;
                
                high--;
                i--; // will be checking the same element once again
            }
        }
        
    }
}

*************************************************************************************************

// Remove duplicates from an unsorted linked list

class Solution {
    //Function to remove duplicates from unsorted linked list.
    public Node removeDuplicates(Node head) {
         
        if (head == null)
            return head;
        
        HashSet<Integer> set = new HashSet<>();
        
        Node temp = head;
        
        set.add(temp.data);
        
        while (temp.next != null) {
            if (!set.contains(temp.next.data)) {
                set.add(temp.next.data);
                
                temp = temp.next;
            } else
                temp.next = temp.next.next;
        }
        
        return head;
        
    }
}


*************************************************************************************************

// Count Pairs whose sum is equal to X

class Solution {

    public static int countPairs(LinkedList<Integer> head1, LinkedList<Integer> head2, int x) {
        
        int n = head1.size();
        int m = head2.size();
        
        HashSet<Integer> set = new HashSet<>();
        
        for (int i = 0; i < n; i++) {
            set.add(x - head1.get(i));
        }
        
        int count = 0;
        for (int item: head2) {
            if (set.contains(item)) {
                count++;
            }
        }
        return count;
        
    }
}

*************************************************************************************************

// Delete nodes having greater value on right 

class Solution {
    Node compute(Node head) {
        
        Node temp = head;
        
        if (head == null) return head;
        
        Node reversedHead = reverse(temp);
        Node tempHead = reversedHead;
        
        int max = tempHead.data;
        
        while (tempHead.next != null) {
            if (tempHead.next.data >= max) {
                max = tempHead.next.data;
                tempHead = tempHead.next;   
            } else {
                tempHead.next = tempHead.next.next;
            }
        }
        
        return reverse(reversedHead);
        
    }
    
    Node reverse (Node node) {
        
        Node curr = node;
        Node prev = null;
        Node next = null;
        
        while (curr != null) {
            next = curr.next;
            
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}

*************************************************************************************************

// Find Minimum in Rotated Sorted Array

class Solution {
    public int findMin(int[] nums) {
        
        int n = nums.length;
        int low = 0;
        int high = n-1;
        
        // array sorted and not rotated
        if (nums[low] < nums[high])  return nums[low];
        else if (n == 1) return nums[0];
        
        while (low <= high) {
            int mid = (low + high) / 2;
            
            // check pivot
            if (nums[mid] > nums[mid+1]) {
                return nums[mid+1];
            } else if (nums[low] <= nums[mid])  // LHS sorted so pivot on RHS
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
        
    }
}

*************************************************************************************************


// Lowest Common Ancestor in a BST

class BST {   
    //Function to find the lowest common ancestor in a BST. 
	Node LCA(Node root, int n1, int n2) {
    
        if (root == null) return root;
        
        int val = root.data;
        
        if (val < n1 && val < n2)
            return LCA(root.right, n1, n2);
        else if (val > n1 && val > n2)
            return LCA(root.left, n1, n2);
            
        return root;
       
    }
}

// Delete a node from BST

class Tree {
    // Function to delete a node from BST.
    public static Node deleteNode(Node root, int X) {
        
        if (root == null)
            return root;
            
        if (X < root.data) 
            root.left = deleteNode(root.left, X);
        else if (X > root.data)
            root.right = deleteNode(root.right, X);
        else {
            if (root.left == null)  
                return root.right;
            else if (root.right == null)
                return root.left;
            
            root.data = minVal(root.right); // root.right as we search min from the child and not from the node itself
            
            root.right = deleteNode(root.right, root.data);
        }
        
        return root;
    }
    
    static int minVal (Node root) {
        int min = root.data;
        
        while (root.left != null) {
            root = root.left;
            min = root.data;
        }
        
        return min;
    }
}

// Inorder Successor in BST

public Node inorderSuccessor(Node root, Node x) {
	Node succ = null;
        
        while (root != null) {
            if (x.data >= root.data)
                root = root.right;
            else {
                succ = root;
                root = root.left;
            }
        } 
        
        return succ;
	}
}

// Delete a Node in Single Linked List

Node deleteNode(Node head, int x) {
	
	    if (head == null)
	        return null;
	       
	    Node temp = head;
	    int index = 2;
	    
	    // first node to be deleted (x == 1)
	    if (x == 1) {
	        temp = temp.next;
	        head = temp;
	        
	        return head;
	    }
	    
	    while (temp.next != null && index != x) {
	        temp = temp.next;
	        index++;
	    }
	    
	    temp.next = temp.next.next;
	    
	    
	    return head;
}

// Check if Linked List is Palindrome

boolean isPalindrome(Node head)  {
        
        // brute force
        // if (head == null)
        //     return true;
        
        // String str = "";
        
        // Node temp = head;
        
        // while (temp != null) {
        //     str += temp.data;
            
        //     temp = temp.next;
        // }
        
        // int low = 0;
        // int high = str.length() - 1;
        
        // while (low <= high) {
        //     if (str.charAt(low) != str.charAt(high))
        //         return false;
        //     low++;
        //     high--;
        // }
        
        // return true;
        
        // optimal
        
        Node temp = head;
        Node slow = head;
        Node fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        Node midP = reverse (slow);
        
        while (midP != null) {
            if (temp.data != midP.data)
                return false;
            temp = temp.next;
            midP = midP.next;
        }
        
        return true;
}    
    
Node reverse (Node head) {
	if (head == null)
        return null;
            
        Node curr = head;
        Node prev = null;
        
        while (curr != null) {
            Node currNext = curr.next;
            
            curr.next = prev;
            prev = curr;
            curr = currNext;
        }
        
        return prev;
}

// Insert in a Sorted List

Node sortedInsert(Node head1, int data) {
        
        if (head1 == null)
            return head1;
            
        Node newNode = new Node(data);
            
        Node temp = head1;
        
        // if the new node is to be inserted in the first place (edge case) 
        if (temp.data > newNode.data) {
            newNode.next = temp;
            head1 = newNode;
            
            return head1;
        }
        
        while (temp.next != null) {
            Node nextTemp = temp.next;
            
            if (temp.next.data >= newNode.data) {
                temp.next = newNode;
                newNode.next = nextTemp;
                
                break;
            } else
                temp = temp.next;
        }
        
        // for taking the temp to the last node so we can add node after it
        temp = head1;
        while (temp.next != null) {
            temp = temp.next;
        }
        
        // inserting in the end (edge case)
        if (temp.data < newNode.data)
            temp.next = newNode;
        
        return head1;
}

// Merge Two Sorted Lists

public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
	// using extra space
        Node dummy = new Node(0);
        Node temp = dummy;
        
        while (true) {
            if (head1 == null) {
                temp.next = head2;
                break;
            } 
            
            if (head2 == null) {
                temp.next = head1;
                break;
            }
            
            if (head1.data <= head2.data) {
                temp.next = head1;
                head1 = head1.next;
            } else {
                temp.next = head2;
                head2 = head2.next;
            }
            
            temp = temp.next;
        }
            
        return dummy.next;
        
        
        // optimal
        if (list1 == null) return list2;
        if (list2 == null) return list1;
        
        ListNode l1 = null;
        ListNode l2 = null;
        
        if (list1.val > list2.val) {
            ListNode temp = list1;
            list1 = list2;
            list2 = temp;
        } // else list1 is already pointing to smaller node
        
        ListNode res = list1;
        
        while (list1 != null && list2 != null) {
            ListNode prev = null;
            while (list1 != null && list1.val <= list2.val) {
                prev = list1;
                list1 = list1.next;
            }
            prev.next = list2;
            
            // swap
            ListNode s = list1;
            list1 = list2;
            list2 = s;
        }
        return res;      
 }

// Delete Middle of Linked List 

class Solution {
    Node deleteMid(Node head) {
        
        if (head == null) return null;
        
        int count = 0;
        Node temp = head;
        
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        
        int index = count/2;
        int i = 0;
        temp = head;
        
        while (i < index-1) {
            temp = temp.next;
            i++;
        }
        
        temp.next = temp.next.next;
        
        return head;
        
    }
}

// Delete without head pointer 

void deleteNode(Node del) {
         
       	// brute force...
        //  Node temp = null;
         
        //  while (del.next != null) {
        //      temp = del;
             
        //      del.data = del.next.data;
        //      del = del.next;
        //  }
        //  temp.next = null;

        
        // optimal (striver)
        del.data = del.next.data;
        del.next = del.next.next;
         
}

// Remove loop in Linked List

public static void removeLoop(Node head) {
        
        // getting the O/P but it manipulates the entire list
        // while (head != null) {
        //     head.data = -1;
            
        //     if (head.next != null && head.next.data == -1) {
        //         head.next = null;
        //         break;
        //     }
        //     head = head.next;
        // }
        
        // brute force
        // HashSet<Node> set = new HashSet<>();
        // Node temp = head;
        
        // while (temp != null) {
        //     if (set.contains(temp.next)) {
        //         temp.next = null;
        //         break;
        //     }
            
        //     set.add(temp);
            
        //     temp = temp.next;
        // }
}

// Detect Linked List Cycle

public boolean hasCycle(ListNode head) {
        
        // brute force
//         if (head == null) return false;
        
//         HashSet<ListNode> set = new HashSet<>();
//         ListNode temp = head;
        
//         while (temp != null) {
//             if (set.contains(temp.next))
//                 return true;
            
//             set.add(temp);
//             temp = temp.next;
//         }
        
//         return false;
        
        // optimal
        
        if (head == null) return false;
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast)
                return true;
        }
        
        return false;
}

// Remove Linked List Elements

public ListNode removeElements(ListNode head, int val) {
        
        if (head == null) return null;
        
        // first node to be deleted
        if (head.val == val) {
            while (head.val == val && head.next != null) {
                head = head.next;
            }
        }
        
        // if only one element is left and it is the one to be deleted.
        if (head.val == val) return null;
        
        ListNode temp = head;
        
        while (temp != null && temp.next != null) {
            if (temp.next.val == val)
                temp.next = temp.next.next;
            else
                temp = temp.next;
        }
        
        return head;
}

// Rearrange a linked list 

https://practice.geeksforgeeks.org/problems/rearrange-a-linked-list/0/?page=1&category[]=Linked%20List&sortBy=submissions#

void rearrangeEvenOdd(Node head) {
        if (head == null) return;

        Node odd = head;
        Node temp = head;
        Node even = head.next;
        Node temp1 = even;
        
        while (even != null && even.next != null) {
            odd.next = odd.next.next;
            even.next = even.next.next;
            even = even.next;
            odd = odd.next;
        }
        
        odd.next = temp1;
}

// Move Last Element to Front of a Linked List

https://practice.geeksforgeeks.org/problems/move-last-element-to-front-of-a-linked-list/0/?page=1&category[]=Linked%20List&sortBy=submissions#

public static Node moveToFront(Node head) {
        
        if (head == null || head.next == null)   
            return head;
            
        Node temp = head;
        Node prev = null;
        
        while (temp.next != null) {
            prev = temp;
            temp = temp.next;
        }
        
        prev.next = null;
        temp.next = head;
        head = temp;
        
        return head;
}

// Remove loop in Linked List

https://practice.geeksforgeeks.org/problems/remove-loop-in-linked-list/0/?page=1#

public static void removeLoop(Node head) {
        
        // getting the O/P but it manipulates the entire list
        // while (head != null) {
        //     head.data = -1;
            
        //     if (head.next != null && head.next.data == -1) {
        //         head.next = null;
        //         break;
        //     }
        //     head = head.next;
        // }
        
        // brute force
        // HashSet<Node> set = new HashSet<>();
        // Node temp = head;
        
        // while (temp != null) {
        //     if (set.contains(temp.next)) {
        //         temp.next = null;
        //         break;
        //     }
            
        //     set.add(temp);
            
        //     temp = temp.next;
        // }
        
        // optimal
        
        Node slow = head;
        Node fast = head;
        Node prev = null;
        boolean flag = false;
        
        while (fast != null && fast.next != null) {
            prev = fast;
            
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast) {
                flag = true;
                break;
            }
        }
        
        if (flag) {
            fast = head;
            
            if (slow == fast) {
                prev.next.next = null;
                
                return;
            }
            
            while (slow.next != fast.next) {
                slow = slow.next;
                fast = fast.next;
            }
            
            slow.next = null;
        }        
}


// Reverse each word in a given string

https://practice.geeksforgeeks.org/problems/reverse-each-word-in-a-given-string1001/0/?page=1&category[]=Stack&sortBy=submissions#


class Solution {
    String reverseWords(String S) {
        
        int n = S.length();
        
        int left = 0;
        int right = 0;
        String newString = "";
        
        while (left < n) {
            while (right < n && S.charAt(right) != '.') {
                right++;
            }
            String str = S.substring(left, right);
            
            newString += reverseSingleWord(str) + '.';
            
            left = right + 1;
            right = left;
        }
        newString = newString.substring(0, n);  // to remove the . in the end
        
        return newString;
    }
    
    String reverseSingleWord(String str) {
        int n = str.length();
        String newStr = "";
        
        for (int i = n-1; i >= 0; i--) {
            char ch = str.charAt(i);
            
            newStr += String.valueOf(ch);
        }
        
        return newStr;
    }
}

// Next Smaller Element

https://practice.geeksforgeeks.org/problems/fab3dbbdce746976ba35c7b9b24afde40eae5a04/0/?page=1&category[]=Stack&sortBy=submissions#

class Solution {
	public static int[] help_classmate(int arr[], int n) { 
	    
	   // brute force...
	   // int[] res = new int[n];
	    
	   // for (int i = 0; i < n-1; i++) {
	   //     for (int j = i+1; j < n; j++) {
	   //         if (i < j && arr[i] > arr[j]) {
	   //             res[i] = arr[j];
	   //             break;
	   //         }
	   //     }
	   //     if (res[i] == 0)
	   //         res[i] = -1;
	   // }
	    
	   // res[n-1] = -1;
	    
	   // return  res;
	   
	  
	   // optimal
	   Stack<Integer> stack = new Stack<>();
	   int[] res = new int[n];
	   
	   res[n-1] = -1;
	   stack.push(arr[n-1]);
	   
	   for (int i = n-2; i >= 0; i--) {
	       while (!stack.isEmpty() && stack.peek() >= arr[i]) {
	           stack.pop();
	       }
	       
	       if (stack.isEmpty()) {
	           res[i] = -1;
	           stack.push(arr[i]);
	       } else {
	           res[i] = stack.peek();
	           stack.push(arr[i]);
	       }
	   }
	   
	   return res;
	   
	} 
}

// Next Greater Element

https://practice.geeksforgeeks.org/problems/next-larger-element-1587115620/0/?page=1&category[]=Stack&sortBy=submissions#

class Solution
{
    //Function to find the next greater element for each element of the array.
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        // brute force
        // long[] newArr = new long[n];
        
        // for (int i = 0; i < n; i++) {
        //     newArr[i] = 0;
        // }
        
        // for (int i = 0; i < n-1; i++) {
        //     for (int j = i+1; j < n; j++) {
        //         if (arr[j] > arr[i]) {
        //             newArr[i] = arr[j];
        //             break;
        //         }
        //     }
        //     if (newArr[i] == 0)
        //         newArr[i] = -1;
        // }
        // newArr[n-1] = -1;
        
        // return newArr;
        
        
        long ans[] = new long[n];
        Stack<Long> stack = new Stack<>();
        
        for (int i = n-1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() < arr[i])
                stack.pop();
            
            if (i < n) {
                if (!stack.isEmpty())   
                    ans[i] = stack.peek();
                else
                    ans[i] = -1;
            }
            stack.push(arr[i]);
        }
        
        return ans;
    } 
}

*******************************************************************************************************************************

//Equilibrium point

public static int equilibriumPoint(long arr[], int n) {

        // brute force
        // int leftSum = 0;
        // int rightSum = 0;
        
        // for (int i = 0; i < n; i++) {
        //     leftSum = 0;
        //     rightSum = 0;
            
        //     for (int j = 0; j < i; j++) {
        //         leftSum += arr[j];
        //     }
            
        //     for (int j = i+1; j < n; j++) {
        //         rightSum += arr[j];
        //     }
            
        //     if (leftSum == rightSum)
        //         return i+1;
        // }
        
        // return -1;
        
        int leftSum = 0;
        int sum = 0;
        
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        
        for (int i = 0; i < n; i++) {
            sum -= arr[i];
            
            if (leftSum == sum)
                return i+1;
            else
                leftSum += arr[i];
        }
        
        return -1;
        
    }
    
    
    ********************************************************************************************************
    // Get min at pop
    
    class GetMin {
    //Function to push all the elements into the stack.
    public static Stack<Integer> _push(int arr[], int n) {
        
        Stack<Integer> stack = new Stack<>();
        
        for (int item: arr) 
            stack.push(item);
        
        
        return stack;
    }
    
    //Function to print minimum value in stack each time while popping.
    static void _getMinAtPop(Stack<Integer> s) {
        
        // brute force
        // int n = s.size();
        
        // int [] res = new int[n];
        // int [] ans = new int[n];
        
        // for (int i = 0; i < n; i++) {
        //     int num = s.pop();
        //     res[i] = num;
        // }
        // ans[n-1] = res[n-1];
        // int min = res[n-1];
        
        // for (int i = n-2; i >= 0; i--) {
        //     if (res[i] > min)
        //         res[i] = min;
        //     else {
        //         min = res[i];
        //         res[i] = min;
        //     }
        // }
        
        // for (int item: res)
        //     System.out.print(item + " ");
        
        int n = s.size();
        int min = s.get(0);
        
        Stack<Integer> stack = new Stack<>();
        stack.push(min);
        
        for (int i = 1; i < n; i++) {
            if (s.get(i) < min)
                min = s.get(i);
                
            stack.push(min);
        }
        
        // for (int item: stack)
        //     System.out.print(item + " ");
        
        for (int i = 0; i < n; i++) {
            System.out.print(stack.pop() + " ");
        }
    }
}

**********************************************************************************

// Parenthesis Checker

class Solution {
    //Function to check if brackets are balanced or not.
    static boolean ispar(String x) {
        
        int n = x.length();
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            char ch = x.charAt(i);
            
            if (ch == '(' || ch == '[' || ch == '{')
                stack.push(ch);
            else {
                if (stack.isEmpty())
                    return false;
                    
                if (stack.peek() == '(' && ch == ')' ||
                    stack.peek() == '[' && ch == ']' ||
                    stack.peek() == '{' && ch == '}')
                        stack.pop();
                else
                    return false;
            }
        }
        
        return stack.isEmpty();
    }
}

****************************************************************************************************************************

// Height of a binary tree

class Solution {
    //Function to find the height of a binary tree.
    int height(Node node)  {
        
        if (node == null)
            return 0;
            
        return Math.max(height(node.left), height(node.right)) + 1;
        
    }
}

****************************************************************************************************************************

// Check for Balanced Tree

class Tree {
    //Function to check whether a binary tree is balanced or not.
    boolean isBalanced(Node root) {
	   
	   // brute force
	   //if (root == null)
	   //    return true;
	   
	   //int leftH = findHeight(root.left);
	   //int rightH = findHeight(root.right);
	   
	   //if (Math.abs(leftH - rightH) > 1)
	   //    return false;
	       
	   //boolean left = isBalanced(root.left);
	   //boolean right = isBalanced(root.right);
	   
	   //if (!left || !right) return false;
	   
	   //return true;
	   
	   // optimal
	   return findHeight(root) != -1;
	   
    }
    
    // brute force
    // int findHeight (Node root) {
    //     if (root == null)
    //         return 0;
        
    //     return Math.max(findHeight(root.left), findHeight(root.right)) + 1;
    // }
    
    // optimal
    int findHeight(Node root) {
        if (root == null) return 0;
        
        int leftH = findHeight(root.left);
        if (leftH == -1) return -1;
        
        int rightH = findHeight(root.right);
        if (rightH == -1) return -1;
        
        if (Math.abs(leftH - rightH) > 1)
            return -1;
            
        return Math.max(leftH, rightH) + 1;
    }
}

